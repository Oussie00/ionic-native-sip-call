import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
/* Call status */
export var CallState;
(function (CallState) {
    CallState["OutgoingInit"] = "OutgoingInit";
    CallState["OutgoingRinging"] = "OutgoingRinging";
    CallState["OutgoingProgress"] = "OutgoingProgress";
    CallState["Connected"] = "Connected";
    CallState["Resuming"] = "Resuming";
    CallState["Ended"] = "Ended";
    CallState["Error"] = "Error";
})(CallState || (CallState = {}));
/* Registration status */
export var RegistrationState;
(function (RegistrationState) {
    /* Initial state for registrations */
    RegistrationState["None"] = "None";
    /* Unregistration succeeded */
    RegistrationState["Cleared"] = "Cleared";
    /* Registration failed */
    RegistrationState["Failed"] = "Failed";
    /* Registration succeeded */
    RegistrationState["Ok"] = "Ok";
    /* Registration in progress */
    RegistrationState["Progress"] = "Progress";
})(RegistrationState || (RegistrationState = {}));
var SipCall = /** @class */ (function (_super) {
    __extends(SipCall, _super);
    function SipCall() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SipCall.prototype.login = function (username, password, realm) { return cordova(this, "login", {}, arguments); };
    SipCall.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    SipCall.prototype.call = function (address, displayName) { return cordova(this, "call", {}, arguments); };
    SipCall.prototype.hangup = function () { return cordova(this, "hangup", {}, arguments); };
    SipCall.prototype.setMicrophoneMuted = function (muted) { return cordova(this, "setMicrophoneMuted", {}, arguments); };
    SipCall.prototype.setSpeakerEnabled = function (enabled) { return cordova(this, "setSpeakerEnabled", {}, arguments); };
    SipCall.prototype.requestPermissions = function () { return cordova(this, "requestPermissions", {}, arguments); };
    SipCall.prototype.onCallStateChanged = function () { return cordova(this, "onCallStateChanged", { "observable": true }, arguments); };
    SipCall.prototype.onRegistrationStateChanged = function () { return cordova(this, "onRegistrationStateChanged", { "observable": true }, arguments); };
    SipCall.pluginName = "SipCall";
    SipCall.plugin = "cordova-plugin-sip-call";
    SipCall.pluginRef = "plugins.SipCall";
    SipCall.repo = "";
    SipCall.install = "";
    SipCall.installVariables = [];
    SipCall.platforms = ["Android"];
    SipCall.decorators = [
        { type: Injectable }
    ];
    return SipCall;
}(AwesomeCordovaNativePlugin));
export { SipCall };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc2lwLWNhbGwvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVsQyxpQkFBaUI7QUFDakIsTUFBTSxDQUFOLElBQVksU0FRWDtBQVJELFdBQVksU0FBUztJQUNuQiwwQ0FBNkIsQ0FBQTtJQUM3QixnREFBbUMsQ0FBQTtJQUNuQyxrREFBcUMsQ0FBQTtJQUNyQyxvQ0FBdUIsQ0FBQTtJQUN2QixrQ0FBcUIsQ0FBQTtJQUNyQiw0QkFBZSxDQUFBO0lBQ2YsNEJBQWUsQ0FBQTtBQUNqQixDQUFDLEVBUlcsU0FBUyxLQUFULFNBQVMsUUFRcEI7QUFFRCx5QkFBeUI7QUFDekIsTUFBTSxDQUFOLElBQVksaUJBV1g7QUFYRCxXQUFZLGlCQUFpQjtJQUMzQixxQ0FBcUM7SUFDckMsa0NBQWEsQ0FBQTtJQUNiLDhCQUE4QjtJQUM5Qix3Q0FBbUIsQ0FBQTtJQUNuQix5QkFBeUI7SUFDekIsc0NBQWlCLENBQUE7SUFDakIsNEJBQTRCO0lBQzVCLDhCQUFTLENBQUE7SUFDVCw4QkFBOEI7SUFDOUIsMENBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQVhXLGlCQUFpQixLQUFqQixpQkFBaUIsUUFXNUI7O0lBK0I0QiwyQkFBMEI7Ozs7SUFVckQsdUJBQUssYUFBQyxRQUFnQixFQUFFLFFBQWdCLEVBQUUsS0FBYTtJQVN2RCx3QkFBTTtJQVdOLHNCQUFJLGFBQUMsT0FBZSxFQUFFLFdBQW1CO0lBU3pDLHdCQUFNO0lBVUwsb0NBQWtCLGFBQUMsS0FBYztJQVVqQyxtQ0FBaUIsYUFBQyxPQUFnQjtJQVNuQyxvQ0FBa0I7SUFXbEIsb0NBQWtCO0lBV2xCLDRDQUEwQjs7Ozs7Ozs7O2dCQTNGM0IsVUFBVTs7a0JBekRYO0VBMEQ2QiwwQkFBMEI7U0FBMUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qIENhbGwgc3RhdHVzICovXG5leHBvcnQgZW51bSBDYWxsU3RhdGUge1xuICBPdXRnb2luZ0luaXQgPSAnT3V0Z29pbmdJbml0JyxcbiAgT3V0Z29pbmdSaW5naW5nID0gJ091dGdvaW5nUmluZ2luZycsXG4gIE91dGdvaW5nUHJvZ3Jlc3MgPSAnT3V0Z29pbmdQcm9ncmVzcycsXG4gIENvbm5lY3RlZCA9ICdDb25uZWN0ZWQnLFxuICBSZXN1bWluZyA9ICdSZXN1bWluZycsXG4gIEVuZGVkID0gJ0VuZGVkJyxcbiAgRXJyb3IgPSAnRXJyb3InXG59XG5cbi8qIFJlZ2lzdHJhdGlvbiBzdGF0dXMgKi9cbmV4cG9ydCBlbnVtIFJlZ2lzdHJhdGlvblN0YXRlIHtcbiAgLyogSW5pdGlhbCBzdGF0ZSBmb3IgcmVnaXN0cmF0aW9ucyAqL1xuICBOb25lID0gJ05vbmUnLFxuICAvKiBVbnJlZ2lzdHJhdGlvbiBzdWNjZWVkZWQgKi9cbiAgQ2xlYXJlZCA9ICdDbGVhcmVkJyxcbiAgLyogUmVnaXN0cmF0aW9uIGZhaWxlZCAqL1xuICBGYWlsZWQgPSAnRmFpbGVkJyxcbiAgLyogUmVnaXN0cmF0aW9uIHN1Y2NlZWRlZCAqL1xuICBPayA9ICdPaycsXG4gIC8qIFJlZ2lzdHJhdGlvbiBpbiBwcm9ncmVzcyAqL1xuICBQcm9ncmVzcyA9ICdQcm9ncmVzcycsXG59XG5cbi8qKlxuICogQG5hbWUgU2lwQ2FsbFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGxldHMgeW91IG1ha2UgY2FsbHMgdXNpbmcgU0lQICBcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNpcENhbGwgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvc2lwLWNhbGwnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNpcENhbGw6IFNpcENhbGwpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLnNpcENhbGwubG9naW4oJ3VzZXJuYW1lJywgJ1BAc3N3bzByZCcsICd0ZXN0LXJlYWxtLmNvbScpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1NpcENhbGwnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1zaXAtY2FsbCcsIC8vIG5wbSBwYWNrYWdlIG5hbWUsIGV4YW1wbGU6IGNvcmRvdmEtcGx1Z2luLWNhbWVyYVxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLlNpcENhbGwnLCAvLyB0aGUgdmFyaWFibGUgcmVmZXJlbmNlIHRvIGNhbGwgdGhlIHBsdWdpbiwgZXhhbXBsZTogbmF2aWdhdG9yLmdlb2xvY2F0aW9uXG4gIHJlcG86ICcnLCAvLyB0aGUgZ2l0aHViIHJlcG9zaXRvcnkgVVJMIGZvciB0aGUgcGx1Z2luXG4gIGluc3RhbGw6ICcnLCAvLyBPUFRJT05BTCBpbnN0YWxsIGNvbW1hbmQsIGluIGNhc2UgdGhlIHBsdWdpbiByZXF1aXJlcyB2YXJpYWJsZXNcbiAgaW5zdGFsbFZhcmlhYmxlczogW10sIC8vIE9QVElPTkFMIHRoZSBwbHVnaW4gcmVxdWlyZXMgdmFyaWFibGVzXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10gLy8gQXJyYXkgb2YgcGxhdGZvcm1zIHN1cHBvcnRlZCwgZXhhbXBsZTogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNpcENhbGwgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG5cbiAgLyoqXG4gICAqIExvZ2luIHdpdGggeW91ciBWb0lQIHByb3ZpZGVyXG4gICAqIEBwYXJhbSB1c2VybmFtZSB7c3RyaW5nfSBVc2VybmFtZVxuICAgKiBAcGFyYW0gcGFzc3dvcmQge3N0cmluZ30gUGFzc3dvcmRcbiAgICogQHBhcmFtIHJlYWxtIHtzdHJpbmd9IFJlYWxtIHRvIGNvbm5lY3QgdG9cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gbG9nZ2VkIGluXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ2luKHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcsIHJlYWxtOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXG4gIH1cblxuICAvKipcbiAgICogTG9nb3V0IGZyb20geW91ciBWb0lQIHByb3ZpZGVyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGxvZ2dlZCBvdXRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9nb3V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuOyAvLyBXZSBhZGQgcmV0dXJuOyBoZXJlIHRvIGF2b2lkIGFueSBJREUgLyBDb21waWxlciBlcnJvcnNcbiAgfVxuXG4gIC8qKlxuICogQ2FsbCB3aXRoIHlvdXIgVm9JUCBwcm92aWRlclxuICogQHBhcmFtIGFkZHJlc3Mge3N0cmluZ30gQWRkcmVzc1xuICogQHBhcmFtIGRpc3BsYXlOYW1lIHtzdHJpbmd9IERpc3BsYXlOYW1lXG4gKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBsb2dnZWQgaW5cbiAqL1xuICBAQ29yZG92YSgpXG4gIGNhbGwoYWRkcmVzczogc3RyaW5nLCBkaXNwbGF5TmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmd1cCB0aGUgY2FsbFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBjYWxsIGlzIHRlcm1pbmF0ZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaGFuZ3VwKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuOyAvLyBXZSBhZGQgcmV0dXJuOyBoZXJlIHRvIGF2b2lkIGFueSBJREUgLyBDb21waWxlciBlcnJvcnNcbiAgfVxuICBcbiAgLyoqXG4gICAqIE11dGUgdGhlIG1pY3JvcGhvbmVcbiAgICogQHBhcmFtIG11dGVkIHtib29sZWFufSBNdXRlZCBcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gbWljIGlzIG11dGVkL2VuYWJsZWRcbiAgICovXG4gICBAQ29yZG92YSgpXG4gICBzZXRNaWNyb3Bob25lTXV0ZWQobXV0ZWQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBzcGVha2VyXG4gICAqIEBwYXJhbSBlbmFibGVkIHtib29sZWFufSBTcGVha2VyIHN0YXRlIFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgc3BlYWtlciBpcyBlbmFibGVkL2Rpc2FibGVkXG4gICAqL1xuICAgQENvcmRvdmEoKVxuICAgc2V0U3BlYWtlckVuYWJsZWQoZW5hYmxlZDogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XG4gICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXG4gICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RQZXJtaXNzaW9ucyBmb3IgdGhlIHBsdWdpbiAoUkVDT1JEX0FVRElPKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgUGVybWlzc2lvbnMgaGF2ZSBiZWVuIHJlcXVlc3RlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZXF1ZXN0UGVybWlzc2lvbnMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cbiAgLyoqXG4gICAqIE9uQ2FsbFN0YXRlQ2hhbmdlZDogaXMgY2FsbGVkIHdoZW4gdGhlIGNhbGwgc3RhdGUgaGFzIGNoYW5nZWRcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxDYWxsU3RhdGU+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB3aGVuIHRoZSBjYWxsIHN0YXRlIGhhcyBjaGFuZ2VkXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZVxuICB9KVxuICBvbkNhbGxTdGF0ZUNoYW5nZWQoKTogT2JzZXJ2YWJsZTxDYWxsU3RhdGU+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cbiAgLyoqXG4gICAqIE9uUmVnaXN0cmF0aW9uU3RhdGVDaGFuZ2VkOiBpcyBjYWxsZWQgd2hlbiB0aGUgcmVnaXN0cmF0aW9uIHN0YXRlIGhhcyBjaGFuZ2VkXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8UmVnaXN0cmF0aW9uU3RhdGU+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB3aGVuIGEgdGhlIHJlZ2lzdHJhdGlvbiBzdGF0ZSBoYXMgY2hhbmdlZFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWVcbiAgfSlcbiAgb25SZWdpc3RyYXRpb25TdGF0ZUNoYW5nZWQoKTogT2JzZXJ2YWJsZTxSZWdpc3RyYXRpb25TdGF0ZT4ge1xuICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXG4gIH1cbn1cbiJdfQ==